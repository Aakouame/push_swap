--------------------------------------------------------------------------------------------------------------------
PUSH_SWAP.c

    int main (int argc, char ** argv)
    {
        info    data;

        if (argc < 1)
        {
            // ft_check  errors !!
            {
                // add numbers on A
                    -
                    -
                // Sorting ----> Need tools
                                /*
                                1- sa (swap a): Swap the first 2 elements at the top of stack a.
                                    Do nothing if there is only one or no elements.
                                2- sb (swap b): --
                                3- ss : sa and sb at the same time.
                                4- pa (push a): Take the first element at the top of b and put it at the top of a.
                                    Do nothing if b is empty.
                                5- pb (push b): --
                                6- ra (rotate a): Shift up all elements of stack a by 1.
                                    The first element becomes the last one.
                                7- rb (rotate b): --
                                8- rr : ra and rb at the same time.
                                9- rra (reverse rotate a): Shift down all elements of stack a by 1.
                                    The last element becomes the first one.
                                10- rrb (reverse rotate b): --
                                11- rrr : rra and rrb at the same time.*/
                        // ----> Need algo sort
                        // ----> need print chaque mov
            }
        }
        return(0);
    }
----------------------------------------------------------------------------------------------------------------------
FT_CHECK.c (method 01)

int ft_check(char **argv)
{
    char    **str;
    int     i;
    int     j;
    char    *dst;

    i = 1;
// 1- SPLIT !------> Need : **str, *dst 
    while(argv[i])
    {
        str = ft_split(argv[i], ' ');
        j = 0;
        while (str[j])
        {
            dst = ft_strjoin(dst, str[j]);
            j++;
        }
        i++;
    }
// 2- CHECK DIGIT
// 3- CHECK REPITE
    return(1);
}
                                    /////////////////////////////////////////
FT_CHECK.c (method 02)

int *ft_check (int tab[], char **argv)
{
    char    *str;
    int     i;
    int     j;
    int     k;

    k = 0;
    i = 1;
    str = NULL;
// PUTE argv dans un tableau 1 dim
    while(argv[i])
    {
        j = 0;
        while(arv[i][j])
        {
            str[k] = argv[i][j];
            k++;
            j++;
        }
        i++;
    }
    str[k] = '\0';
// Check digit
// remplire tableau de int
// Check repeat 
    return (tab);
}
------------------------------------------------------------------------------------------------------
PUSH_ADD.c

// 1    - organise la liste A
// 2    - put argv on string Str
// 3    - put les nombres de str en la liste A




++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
creat_new_element
delete_element
add_head
add_quee
******************************************************************************************************
SORT_1.c

//  3 NUMBERS       Exp : 1 - 2 - 3 / 2 - 3 - 1/ 3 - 1 - 2/ 3 - 2 - 1 =
                        4 - 5 - 9 --> 5 - 9
/*  
    if (A == not sorted)
    {
        ft_push(A, B);
        if (A.num > A.Next.num)
            ft_rotate(*A);
        ft_push(B, A);
        if (A.num > A.)
    }
*/
==============================================================================================
SORT_3.c

//  7 NUMBES exp : 2 - 4 - 1 - 7 - 9 - 10 - 5

/*                  ( 100 RANDOM    NUMBERS !)
    1-  Put the smallest number on top by using ra or rra (3la 7assab indice)

    2- push it on B
    